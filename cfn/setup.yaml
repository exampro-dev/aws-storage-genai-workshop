AWSTemplateFormatVersion: '2010-09-09'
Description: IAM User with scoped access to Bedrock, S3, RDS, and CloudFormation + PostgreSQL RDS

Parameters:
  UserName:
    Type: String
    Default: GenAIStorageUser
    Description: IAM username to create

  DBInstanceIdentifier:
    Type: String
    Default: 'vectordb'
    Description: 'Unique identifier for the RDS instance'
  
  DBName:
    Type: String
    Default: 'vectordb'
    Description: 'Name of the initial database'
  
  MasterUsername:
    Type: String
    Default: 'postgres'
    Description: 'Master username for the database'
  
  MasterUserPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: 'Master password for the database (min 8 characters)'
  
  DBInstanceClass:
    Type: String
    Default: 'db.t3.micro'
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
    Description: 'RDS instance class'

  SubnetIds:
    Type: CommaDelimitedList
    Description: 'List of subnet IDs for DB subnet group (must be in different AZs)'

Resources:
  Bucket:
    Type: AWS::S3::Bucket

  GenAIStorageUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      ManagedPolicyArns: []
      Policies:
        - PolicyName: RegionScopedAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:ListFoundationModels
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetModelInvocationLoggingConfiguration
                Resource: "*"
                Condition:
                  StringEquals:
                    # Due to cross-region endpoint we need all possible requested regions
                    aws:RequestedRegion: 
                      - ap-south-1
                      - ap-northeast-1
                      - ap-northeast-2
                      - ap-northeast-3
                      - ap-southeast-1
                      - ap-southeast-2
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt Bucket.Arn
                Condition:
                  StringEquals:
                    aws:RequestedRegion: ap-northeast-1
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${Bucket.Arn}/*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: ap-northeast-1
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                  - rds:ModifyDBInstance
                  - rds:RebootDBInstance
                  - rds:DeleteDBInstance
                  - rds:StartDBInstance
                  - rds:StopDBInstance
                  - rds:CreateDBSnapshot
                  - rds:DeleteDBSnapshot
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBParameterGroups
                  - rds:DescribeDBLogFiles
                  - rds:DownloadDBLogFilePortion
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DBInstanceIdentifier}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: ap-northeast-1
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStacks
                  - cloudformation:GetTemplate
                  - cloudformation:DescribeStackResources
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: ap-northeast-1

  AccessKey:
    Type: AWS::IAM::AccessKey
    DependsOn: GenAIStorageUser
    Properties:
      UserName: !Ref GenAIStorageUser

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for PostgreSQL RDS instance with public access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: 'Allow PostgreSQL access from anywhere'
      Tags:
        - Key: Name
          Value: 'PostgreSQL-Public-Access-SG'

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet-group"
      DBSubnetGroupDescription: 'DB Subnet Group for PostgreSQL RDS instance'
      SubnetIds: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: 'PostgreSQL-DB-Subnet-Group'

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: '17.2'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      MultiAZ: false
      StorageEncrypted: true
      DeletionProtection: false
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Tags:
        - Key: Name
          Value: 'PostgreSQL with pgvector'

Outputs:
  AccessKeyId:
    Value: !Ref AccessKey
    Description: The access key ID for the user

  SecretAccessKey:
    Value: !GetAtt AccessKey.SecretAccessKey
    Description: The secret access key for the user

  BucketName:
    Value: !Ref Bucket
    Description: The unique S3 bucket name generated by CloudFormation

  DatabaseEndpoint:
    Description: 'RDS PostgreSQL endpoint'
    Value: !GetAtt DatabaseInstance.Endpoint.Address

  DatabasePort:
    Description: 'RDS PostgreSQL port'
    Value: !GetAtt DatabaseInstance.Endpoint.Port

  DatabaseName:
    Description: 'Database name'
    Value: !Ref DBName

  ConnectionString:
    Description: 'Connection string for the database'
    Value: !Sub 'postgresql://${MasterUsername}:${MasterUserPassword}@${DatabaseInstance.Endpoint.Address}:${DatabaseInstance.Endpoint.Port}/${DBName}'

  SecurityGroupId:
    Description: 'Security Group ID for the RDS instance'
    Value: !Ref DatabaseSecurityGroup