#!/usr/bin/env ruby
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __dir__)
require 'bundler/setup'
Bundler.require(:default)

require 'aws-sdk-cloudformation'
require 'aws-sdk-bedrockruntime'
require 'pg'
require 'json'
require 'dotenv'
require 'erb'

Dotenv.load(File.expand_path('../../.env', __dir__))

# Check for query parameter
if ARGV.empty?
  puts "Usage: #{$0} \"<your query here>\""
  puts "Example: #{$0} \"cracks in wall that are not a concern\""
  exit 1
end

query = ARGV[0]

def generate_embedding(client:, model_id:, text:)
  return nil if text.nil? || text.empty?
  
  response = client.invoke_model({
    model_id: model_id,
    content_type: 'application/json',
    body: JSON.generate({
      inputText: text.strip,
      dimensions: 1024,
      normalize: true
    })
  })
  result = JSON.parse(response.body.read)
  result['embedding']
end

def process_natural_language_query(client:, model_id:, user_query:, prompt:)
  raise "Query cannot be blank" if user_query.nil?
  puts "Processing query: #{user_query}"
  
  puts "PROMT: #{prompt}"
  response = client.converse({
    model_id: model_id,
    messages: [
      {
        role: 'user',
        content: [{ text: user_query }]
      }
    ],
    system: [{ text: prompt }],
    inference_config: {
      temperature: 0.1,
      max_tokens: 500
    }
  })
  
  data = JSON(response.output.message.content[0].text)
  return data
end

def build_sql_query(search_embedding:, filters:, limit: 10, template_path:)
  search_vector = "[#{search_embedding.join(',')}]"
  param_count = 1 # Will be incremented in template
  
  # Load and render template
  template = ERB.new(File.read(template_path))
  sql = template.result(binding).strip
  
  # Build params (same as original)
  params = [search_vector]
  params << filters['asset_type'] if filters['asset_type']
  params << filters['severity_level'] if filters['severity_level']
  params << filters['defect_detected'] if !filters['defect_detected'].nil?
  params << filters['requires_action'] if !filters['requires_action'].nil?
  
  if filters['defect_types'] && filters['defect_types'].any?
    defect_array = "{#{filters['defect_types'].map { |t| "\"#{t}\"" }.join(',')}}"
    params << defect_array
  end
  
  return sql, params
end

def search(client:, model_id:, embed_model_id:, db:, user_query:, limit: 10, search_sql:, prompt:)
  query_analysis = process_natural_language_query(
    prompt: prompt,   
    client: client,
    model_id: model_id,
    user_query: user_query
  )
  
  puts "\nQuery Analysis:"
  puts "Intent: #{query_analysis['intent']}"
  puts "Search Terms: #{query_analysis['search_terms']}"
  puts "Confidence: #{query_analysis['confidence']}"
  puts "Filters: #{query_analysis['filters'].reject { |k,v| v.nil? }}"
  
  search_embedding = generate_embedding(
    client: client,
    model_id: embed_model_id,
    text: query_analysis['search_terms']
  )
  
  sql, params = build_sql_query(
    search_embedding: search_embedding,
    filters: query_analysis['filters'],
    limit: limit,
    template_path: search_sql
  )

  puts "SQL ==="
  puts params.each_with_index.reduce(sql.dup) { |s, (param, i)| s.gsub("$#{i+1}", param.inspect) }
  
  puts "\nExecuting search..."

  results = db.exec_params(sql, params)
  results
end

stack_name = ENV['STACK_NAME']
cfn = Aws::CloudFormation::Client.new
response = cfn.describe_stacks(stack_name: stack_name)
stack = response.stacks.first
database_url = stack.outputs.find{ |o| o.output_key == 'ConnectionString' }['output_value']
puts "Database: #{database_url}"

search_sql     = File.expand_path('../inputs/sql/search.sql.erb', __dir__)
prompt         = File.read(File.expand_path('../inputs/prompts/search.txt', __dir__))
client         = Aws::BedrockRuntime::Client.new(region: ENV['AWS_REGION'])
model_id = 'apac.amazon.nova-pro-v1:0' # have to use cross-region inference or it will error out
embed_model_id = 'amazon.titan-embed-text-v2:0'
  
db = PG.connect(database_url)

results = search(
  client: client,
  model_id: model_id,
  embed_model_id: embed_model_id,
  db: db,
  user_query: query,
  limit: 3,
  search_sql: search_sql,
  prompt: prompt
)

puts "\nResults (#{results.ntuples} found):"
puts "-" * 60

results.each_with_index do |row, index|
  puts "#{index + 1}. #{row['filename']} (#{(row['similarity_score'].to_f * 100).round(1)}% match)"
  puts "   Asset: #{row['asset_type']} #{row['asset_subtype']}"
  puts "   Severity: #{row['severity_level']}"
  puts "   Defects: #{row['defect_types']}"
  puts "   Action Required: #{row['requires_action']}"
  puts "   Description: #{row['description'][0..100]}..."
  puts ""
end