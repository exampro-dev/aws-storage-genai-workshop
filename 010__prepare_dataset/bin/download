#!/usr/bin/env ruby
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __dir__)
require 'bundler/setup'
Bundler.require(:default)

require 'aws-sdk-s3'
require 'json'
require 'dotenv'

Dotenv.load(File.expand_path('../../.env', __dir__))

# Initialize S3 client
s3 = Aws::S3::Client.new

# Read the local inventory file
inventory_filename = "#{File.basename(ENV['AWS_FILE_KEY'], '.zip')}_inventory.json"
inventory   = JSON.parse(File.read(File.expand_path("../outputs/#{inventory_filename}", __dir__)))

# Specify which file you want to extract
target_file = ARGV[0] || 'photo.jpg'  # or get from user input

# Find the file in inventory
file_info = inventory['files'].find { |f| f['name'] == target_file }

if file_info.nil?
  puts "File '#{target_file}' not found in inventory"
  puts "Available files:"
  inventory['files'].each { |f| puts "  - #{f['name']}" }
  exit 1
end

puts "Found #{file_info['name']} at range: #{file_info['range']}"

# Download only that file's bytes from S3
response = s3.get_object(
  bucket: ENV['AWS_BUCKET_NAME'],
  key: ENV['AWS_FILE_KEY'],
  range: file_info['range']
)

# Save the compressed data
compressed_data = response.body.read
output_filename = "extracted_#{file_info['name']}"

# Decompress the data
begin
  if file_info['compression_method'] == 0
    decompressed_data = compressed_data
  else
    inflater = Zlib::Inflate.new(-Zlib::MAX_WBITS)
    decompressed_data = inflater.inflate(compressed_data)
    inflater.close
  end
 
  output_filename = "extracted_#{file_info['name']}"
  File.open(output_filename, 'wb') { |f| f.write(decompressed_data) }
 
  puts "Decompressed and saved: #{output_filename}"
  puts "Final size: #{decompressed_data.length} bytes"
  
rescue => e
  puts "Decompression failed: #{e.message}"
  puts "The byte range might include ZIP headers. You may need to adjust the range."
end