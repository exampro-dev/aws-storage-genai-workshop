#!/usr/bin/env ruby
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __dir__)
require 'bundler/setup'
Bundler.require(:default)

require 'aws-sdk-bedrockruntime'
require 'dotenv'
require 'json'
require 'base64'
require 'pry'

Dotenv.load(File.expand_path('../../.env', __dir__))

def annotate(client:, model_id:, file_path:, prompt:)
  # Read and encode image
  image_data = File.read(file_path)
  base64_image = Base64.strict_encode64(image_data)
  
  # Call Amazon Nova
  response = client.invoke_model({
    model_id: model_id,
    content_type: 'application/json',
    # https://docs.aws.amazon.com/nova/latest/userguide/complete-request-schema.html
    body: JSON.generate({
      messages: [{
        role: 'user',
        content: [
          { 'text': prompt },
          { 'image': { 
              format: 'jpeg', 
              source: {bytes: base64_image }  # Base64-encoded string (Invoke API)
            }  
          } 
        ]
      }],
      inferenceConfig: {
        temperature: 0.1,
        maxTokens: 1000
      }
    })
  })
  
  # Parse Nova response
  result = JSON.parse(response.body.read)
  text = JSON.parse(result['output']['message']['content'][0]['text'])
  return text
end

prompt   = File.read(File.expand_path('../inputs/prompts/annotate.txt', __dir__))
image_files = Dir.glob(File.expand_path('../inputs/images/*.jpg', __dir__))
annotations = {}
model_id = 'apac.amazon.nova-pro-v1:0' # have to use cross-region inference or it will error out
client = Aws::BedrockRuntime::Client.new region: ENV['AWS_REGION']
output_file   = File.expand_path('../outputs/annotate.json', __dir__)

image_files.each_with_index do |file_path, index|
  filename = File.basename(file_path)
  puts "Analyzing #{filename} (#{index + 1}/#{image_files.length})"
  
  attrs = {
    client: client, 
    file_path: file_path, 
    prompt: prompt,
    model_id: model_id
  }
  annotation = annotate(**attrs)
  puts "annotate: #{annotation.inspect}"
  annotations[filename] = annotation
  sleep(1) # avoid rate limiting
end

File.write(output_file, JSON.pretty_generate(annotations))
puts "Annotations saved to #{output_file}"